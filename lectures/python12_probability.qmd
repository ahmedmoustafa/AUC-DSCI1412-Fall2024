---
title: "Probability with Python"
format:
  revealjs:
    slide-number: true
    transition: 'slide'
    preview-links: true
    scrollable: true
    title-slide-attributes:
      data-background-image: ""
      class: "title-slide-with-logo"
    logo: "images/auc.png"
    width: 1280
    height: 720
    margin: 0.1
    minScale: 0.2
    maxScale: 1.0
---

# The `random` Package in Python

![Random](https://media.gettyimages.com/id/172858773/photo/says.jpg?s=2048x2048&w=gi&k=20&c=f1K7iXQpwcYdWdMwcQbH32avv-hUmyPzISstXdBbIF0=)

## What is the `random` Package?
- The `random` package is a built-in Python library used to generate random numbers and perform random operations.
- It supports generating:
    - Random numbers (integers, floats).
    - Random selections from data structures (lists, strings, etc.).
    - Values from various statistical distributions.

## Why Use the `random` Package?
- Simulations and modeling.
- Games and decision-making.
- Sampling and data shuffling.
- Cryptography and secure random number generation (use secrets for cryptographic applications).

![Ones and Zeros](https://media.gettyimages.com/id/1317329445/photo/binary-code-background.jpg?s=1024x1024&w=gi&k=20&c=3N_6vG3pVOsOLUN0UEZenrkjWGwqHN28L3RdECZvJPM=)

## Main Methods of the `random` Package in Python

| **Method**                     | **Description**                                                  | **Code Example**                            | **Sample Output**          |
|--------------------------------|------------------------------------------------------------------|---------------------------------------------|----------------------------|
| `random()`                     | Returns a random float in `[0.0, 1.0)`.                         | `random.random()`                           | `0.764532`                 |
| `uniform(a, b)`                | Random float in `[a, b]`.                                        | `random.uniform(5, 10)`                     | `7.8934`                   |
| `randint(a, b)`                | Random integer in `[a, b]` (inclusive).                         | `random.randint(1, 10)`                     | `4`                        |
| `randrange(start, stop, step)` | Random number from range with step.                             | `random.randrange(0, 20, 5)`                | `10`                       |
| `choice(seq)`                  | Random element from a sequence.                                 | `random.choice(['apple', 'banana'])`        | `'banana'`                 |
| `choices(pop, weights, k)`     | `k` random elements with optional weights.                      | `random.choices(['a', 'b'], [10, 1], k=3)`  | `['a', 'a', 'b']`          |
| `sample(pop, k)`               | `k` unique random elements.                                     | `random.sample(range(10), 3)`               | `[2, 6, 9]`                |
| `shuffle(seq)`                 | Shuffles the elements of a list in place.                      | `lst = [1, 2]; random.shuffle(lst); lst`    | `[2, 1]`                   |
| `seed(a)`                      | Sets the seed for reproducibility.                              | `random.seed(42); random.random()`          | `0.6394267984578837`       |
| `gauss(mu, sigma)`             | Random value from Gaussian distribution.                        | `random.gauss(0, 1)`                        | `-0.143265`                |

## Probability with Python

For the following probability problems, solve them analytically first. Then, write a Python program to simulate the situations and find the approximate probabilities. Compare these results with your analytical findings.

## Tossing Coin

Calculate the probability of obtaining a head when tossing a fair coin once

::: {.fragment}

### Analytical

#### Overview

When you toss a fair coin, it can land either heads or tails. With the coin being fair, each outcome has an equal probability of occurring.

#### Calculation

The probability of obtaining a specific outcome (like a head) is determined by the ratio of the number of favorable outcomes to the total number of possible outcomes:

- **Number of favorable outcomes** (obtaining a head): 1
- **Total number of possible outcomes** (either head or tail): 2

#### Formula for Probability

The probability $P$ of getting a head is given by:

$$
P(\text{Head}) = \frac{\text{Number of favorable outcomes}}{\text{Total number of possible outcomes}} = \frac{1}{2}
$$

#### Conclusion

This results in a probability of $\frac{1}{2}$, or 0.5, which translates to a 50% chance of the coin landing heads up in a single toss. This demonstrates the equal likelihood of either outcome in a fair coin toss.

:::

::: {.fragment}

### Simulation

```{python}
#| echo: true
import random

def simulate_coin_toss(trials):
    count_heads = 0  # Initialize the count of heads
    for _ in range(trials):
        # Randomly generate 0 for tails or 1 for heads
        if random.randint(0, 1) == 1:
            count_heads += 1  # Increment if the result is heads
    return count_heads / trials  # Calculate the probability of heads

# Number of trials for the simulation
num_trials = 100000

# Perform the simulation
simulate_coin_toss(num_trials)
```
:::

## Rolling Dice

Calculate the probability of rolling a number greater than 4 at least once in two rolls.

::: {.fragment}

### Analytical

#### Overview

To calculate the probability of rolling a number greater than 4 at least once in two rolls of a fair six-sided die, you can follow these steps:

1. **Probability of rolling a number greater than 4 in one roll:**
   - Only two numbers (5 and 6) out of six possible outcomes are greater than 4. Thus, the probability for one roll is:
     $$
     \frac{2}{6} = \frac{1}{3}
     $$

2. **Probability of not rolling a number greater than 4 in one roll:**
   - The probability is the complement of rolling a number greater than 4, calculated as:
     $$
     1 - \frac{1}{3} = \frac{2}{3}
     $$
     
3. **Probability of not rolling a number greater than 4 in two rolls:**
   - If each roll independently has a $$ \frac{2}{3} $$ chance of not rolling a number greater than 4, then the probability of this happening in two consecutive rolls is:
     $$
     (\frac{2}{3})^2 = \frac{4}{9}
     $$

4. **Probability of rolling a number greater than 4 at least once in two rolls:**
   - This is calculated by subtracting the probability of not rolling a number greater than 4 in two rolls from 1:
    $$
    1 - \frac{4}{9} = \frac{5}{9}
    $$

Therefore, the probability of rolling a number greater than 4 at least once in two rolls of a fair die is $$ \frac{5}{9} $$, or approximately 55.56%.

:::


::: {.fragment}

### Simulation

```{python}
#| echo: true
import random

def simulate_dice_rolls(trials):
    count_success = 0
    for _ in range(trials):
        roll1 = random.randint(1, 6)
        roll2 = random.randint(1, 6)
        # Check if either of the rolls is greater than 4 (i.e., a 5 or 6)
        if roll1 > 4 or roll2 > 4:
            count_success += 1
    return count_success / trials

# Number of trials for the simulation
num_trials = 100000

# Perform the simulation
simulate_dice_rolls(num_trials)
```
:::


## Dice Roll Sum

What is the probability of rolling a sum of 10 with three six-sided dice?

::: {.fragment}

### Analytical

#### Overview

To find the probability of rolling a sum of 10 with three six-sided dice, we need to calculate:

1. **Total Outcomes:** Since each die has 6 sides, when rolling three dice, the total number of outcomes is calculated as:
   $$ 6 \times 6 \times 6 = 216 $$

2. **Favorable Outcomes:** We need to identify all combinations of dice rolls that sum to 10, considering only the combinations where each die's result ranges from 1 to 6.

#### Total Outcomes

Each die has 6 sides, and each side can independently result in any number from 1 to 6. Therefore, when rolling three dice, the total number of possible outcomes is:
$$ 6^3 = 216 $$

#### Favorable Outcomes

We consider combinations where the sum of the three dice equals 10. Valid combinations are listed below:

- (1, 3, 6)
- (1, 4, 5)
- (1, 5, 4)
- (1, 6, 3)
- (2, 2, 6)
- (2, 3, 5)
- (2, 4, 4)
- (2, 5, 3)
- (2, 6, 2)
- (3, 1, 6)
- (3, 2, 5)
- (3, 3, 4)
- (3, 4, 3)
- (3, 5, 2)
- (3, 6, 1)
- (4, 1, 5)
- (4, 2, 4)
- (4, 3, 3)
- (4, 4, 2)
- (4, 5, 1)
- (5, 1, 4)
- (5, 2, 3)
- (5, 3, 2)
- (5, 4, 1)
- (6, 1, 3)
- (6, 2, 2)
- (6, 3, 1)

#### Probability Calculation

The probability $P$ of rolling a sum of 10 is the ratio of favorable outcomes to total outcomes:

$$
P = \frac{\text{Number of favorable outcomes}}{\text{Total outcomes}} = \frac{27}{216} = 12.5%
$$

:::


::: {.fragment}

### Simulation

```{python}
#| echo: true
import random

def simulate_sum_of_dice(trials):
    count_success = 0
    for _ in range(trials):
        # Roll three six-sided dice
        roll1 = random.randint(1, 6)
        roll2 = random.randint(1, 6)
        roll3 = random.randint(1, 6)
        # Calculate the sum of the three rolls
        dice_sum = roll1 + roll2 + roll3
        # Check if the sum is exactly 10
        if dice_sum == 10:
            count_success += 1
    return count_success / trials  # Calculate the probability

# Number of trials for the simulation
num_trials = 100000

# Perform the simulation
simulate_sum_of_dice(num_trials)
```
:::

## Three Fair Coins

You toss three fair coins simultaneously. Each coin can result in either heads (H) or tails (T). You want to determine the probability of getting exactly two heads in one toss of all three coins.

::: {.fragment}

### Analytical

#### Overview

Each coin has two possible outcomes: heads (H) or tails (T). When tossing three coins, we are interested in finding the probability of getting exactly two heads. 

#### Total Possible Outcomes

There are a total of $2^3 = 8$ outcomes for three coin tosses:

- HHH
- HHT
- HTH
- HTT
- THH
- THT
- TTH
- TTT

#### Favorable Outcomes

The favorable outcomes where exactly two coins show heads are:

- HHT
- HTH
- THH

This gives us 3 favorable outcomes.

#### Probability Calculation

The probability is calculated as the number of favorable outcomes divided by the total number of outcomes:
$$ P(\text{Exactly two heads}) = \frac{3}{8} = 0.375 $$

:::


::: {.fragment}

### Simulation

```{python}
#| echo: true
import random

def coin_toss():
    return random.choice(['H', 'T'])

def simulate_trials(num_trials):
    two_heads_count = 0

    for _ in range(num_trials):
        results = [coin_toss() for _ in range(3)]
        if results.count('H') == 2:
            two_heads_count += 1

    return two_heads_count / num_trials

# Run the simulation
num_trials = 100000
simulated_probability = simulate_trials(num_trials)
print(f"Simulated Probability of getting exactly two heads: {simulated_probability}")
```

:::



## The Card Drawing Problem

Calculate the probability of drawing three specific cards in a specific order from a shuffled deck.

::: {.fragment}

### Analytical

#### Overview

To calculate the probability of drawing three specific cards in a specific order from a standard shuffled deck of 52 cards, consider each draw independently. Suppose you want to draw the Queen of Hearts, then the Ace of Spades, and then the 10 of Diamonds. Here’s how to calculate the probability:

1. **Probability of drawing the Queen of Hearts first:**
   - There is exactly one Queen of Hearts in the deck of 52 cards.
   - Thus, the probability of drawing the Queen of Hearts on the first draw is:

   $$
   \frac{1}{52}
   $$

2. **Probability of drawing the Ace of Spades second:**
   - After drawing the Queen of Hearts, there are 51 cards left.
   - There is exactly one Ace of Spades in these remaining cards.
   - Thus, the probability of drawing the Ace of Spades second is:

   $$
   \frac{1}{51}
   $$

3. **Probability of drawing the 10 of Diamonds third:**
   - After the first two cards have been drawn, there are 50 cards left.
   - There is exactly one 10 of Diamonds in these remaining cards.
   - Thus, the probability of drawing the 10 of Diamonds third is:

   $$
   \frac{1}{50}
   $$

To find the total probability of drawing all three cards in this specific order, multiply the probabilities of each individual event occurring in sequence:

$$
\text{Total Probability} = \left(\frac{1}{52}\right) \times \left(\frac{1}{51}\right) \times \left(\frac{1}{50}\right) = \frac{1}{132600}
$$

Thus, the probability of drawing these three specific cards in this specific order from a shuffled deck is $\frac{1}{132600}$, which is approximately 0.00075% or 7.55e-6.

:::


::: {.fragment}

### Simulation

```{python}
#| echo: true
import random

def draw_specific_cards():
    deck = list(range(52))  # Represent cards as numbers 0-51
    random.shuffle(deck)
    # Specific cards are indices 0, 1, 2
    return deck.pop() == 0 and deck.pop() == 1 and deck.pop() == 2

num_trials = 10000
successes = sum(1 for _ in range(num_trials) if draw_specific_cards())
successes/num_trials
```

:::







## Lottery Ticket Selection

Calculate the probability of winning a lottery where participants choose 6 numbers from 1 to 49.

::: {.fragment}

### Analytical

#### Overview

In this scenario, we consider a lottery where participants must choose 6 numbers from a set of 49. The winner of the lottery is determined by matching all six numbers drawn.


The combination formula $\binom{n}{k}$ is used to calculate the total number of possible combinations that can be formed by selecting $k$ numbers from $n$ items without regard to order:

- **Total numbers available $n$:** 49
- **Numbers to be chosen $k$:** 6

#### Formula for Combinations

$$
\binom{49}{6} = \frac{49 \times 48 \times 47 \times 46 \times 45 \times 44}{6 \times 5 \times 4 \times 3 \times 2 \times 1}
$$

This calculation will yield the total number of ways to choose 6 numbers from 49.

#### Probability Calculation

Since there is only one winning combination, the probability of winning $P$ is calculated as:
$$
P(\text{winning}) = \frac{1}{\text{Total combinations}}
$$

Substituting in the total combinations calculated:
$$
P(\text{winning}) = \frac{1}{13,983,816}
$$

#### Conclusion

The probability of winning by correctly guessing all six numbers is $\frac{1}{13,983,816}$. This illustrates the extremely low likelihood of winning the lottery, which is typically characterized by such high odds against winning.

:::

::: {.fragment}

### Simulation

```{python}
#| echo: true
import random

def generate_lottery_ticket():
    """Generate a lottery ticket as a set of 6 unique numbers."""
    return sorted(random.sample(range(1, 50), 6))

def simulate_lottery(draws):
    """Simulate the lottery for a specified number of draws."""
    winning_ticket = generate_lottery_ticket()  # Define a winning ticket
    wins = 0

    for _ in range(draws):
        ticket = generate_lottery_ticket()
        if ticket == winning_ticket:
            wins += 1

    return wins, winning_ticket

# Set the number of simulations
num_simulations = 1000000  # One million simulations
wins, winning_ticket = simulate_lottery(num_simulations)

print(f"Winning ticket: {winning_ticket}")
print(f"Total wins in {num_simulations} draws: {wins}")
print(f"Estimated probability of winning: {wins / num_simulations}")

```
:::
