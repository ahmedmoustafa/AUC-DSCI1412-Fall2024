---
title: "Introduction to Python"
subtitle: "DSCI 1412 - Fall 2024"
author:
  - name: "Ahmed Moustafa"
    email: amoustafa@auceypt.edu
    affiliations:
      - name: The American University in Cairo
format:
  revealjs:
    slide-number: true
    preview-links: true
    scrollable: true
---

## What is Python?

- Python is an **interpreted**, **high-level**, **general-purpose** programming language that supports multiple programming paradigms, including procedural, object-oriented, and functional programming.

- It was developed by [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) and first released in 1991.

![Python](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/701px-Python-logo-notext.svg.png)

## Why is it called Python?

When he began implementing Python, [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) (left) was also reading the published scripts from [Monty Python's Flying Circus](https://en.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus) (right), a BBC comedy series from the 1970s. Van Rossum thought he needed a name that was short, unique, and slightly mysterious, so he decided to call the language Python. [Source: General Python FAQ]

![Guido van Rossum & Monty Python's Flying Circus](images/python.png)

## Design Philosophy

Python is built on the philosophy of **simplicity** and **elegance**. The core philosophy, outlined in [The Zen of Python](https://peps.python.org/pep-0020/) by [Tim Peters](https://en.wikipedia.org/wiki/Tim_Peters_(software_engineer)), highlights principles like "**Readability counts**" and "**There should be one—and preferably only one—obvious way to do it.**"

![The Zen of Python](images/the_zen_of_python.png)


## Python Popularity

![The Most Popular Programming Languages](https://cdn.statcdn.com/Infographic/images/normal/16567.jpeg)


## Why Python?

:::: {.columns}

::: {.column width="70%"}

- Easy to Learn and Use:
  - Simple, readable syntax similar to English
  - Gentle learning curve ideal for beginners

- Versatile and Powerful:
  - Supports multiple programming paradigms (functional, object-oriented)
  - Extensive standard library and rich ecosystem of third-party packages

- Wide Range of Applications:
  - Web development ([Django](https://www.djangoproject.com), [Flask](https://flask.palletsprojects.com/))
  - Data science and machine learning ([NumPy](https://numpy.org), [Pandas](https://pandas.pydata.org), [TensorFlow](https://www.tensorflow.org))
  -   Automation, scripting, and more

- Strong Community Support:
  - Large, active community contributes to continuous improvement
  - Abundant resources, tutorials, and documentation available

- High Demand in the Job Market: Widely used across industries

:::

::: {.column width="30%"}

![](https://media.gettyimages.com/id/172990730/photo/all-purpose-knife.jpg?s=2048x2048&w=gi&k=20&c=JmLxk7lOXTGC_ozD1l68iWP3XndGuXZx6XdVRW3cP-Q=)


![](https://media.gettyimages.com/id/1372192189/photo/vibrant-chameleon-on-succulent-close-up-of-chameleon-on-plant-seven-points-texas-united.jpg?s=2048x2048&w=gi&k=20&c=1ePwfCiQwQOAYZmLsHbB48j5YzEDVTVdFJ5NnYhL1Hc=)

![](https://media.gettyimages.com/id/1498955543/photo/industrial-robots-at-the-automatic-car-manufacturing-factory-assembly-line.jpg?s=2048x2048&w=gi&k=20&c=ku_6TqwqJ8N3Vq_PAILHyuL9RVodSPhDvV3bPXqF-RI=)

:::
::::


## Who Uses Python?

![Top Companies Use Python](images/companies.png)

<small>([Source: Top 10 Python Development Company to Hire](https://medium.com/nerd-for-tech/top-10-python-development-company-to-hire-d83507a33755))</small>

## First Image of a Black Hole

:::: {.columns}
::: {.column width="60%"}

![Katie Bouman's moment when the first black hole image was processed](https://girlgeek.io/wp-content/uploads/2019/04/katie-bouman-black-hole-image.jpg)

<small><small>
Source: [Girl Geek X](https://girlgeek.io/katherine-l-katie-bouman-supermassive-black-hole-algorithm-event-horizon-telescope-eht/)
</small></small>

:::

::: {.column width="40%"}
![First Image of a Black Hole, Boston, April 2019](images/blackhole.png)

<small><small>
Source: [NASA](https://science.nasa.gov/resource/first-image-of-a-black-hole/). Credit: [Event Horizon Telescope Collaboration](https://eventhorizontelescope.org/)
</small></small>

:::
::::



## Working with Python using Google Colab

Homepage: [https://colab.research.google.com/](https://colab.research.google.com/) (runs online, cloud-computing like)

![Google Colab](images/colab.png)

## Working with Python using JupyterLab Desktop
Homepage: [https://github.com/jupyterlab/jupyterlab-desktop](https://github.com/jupyterlab/jupyterlab-desktop) (runs offline, desktop)

![JupyterLab Desktop](https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/media/jupyterlab-desktop.png)

## Working with Python using Visual Source Code
Homepage: [https://code.visualstudio.com/](https://code.visualstudio.com/) (runs offline, desktop)

![VS Code](https://code.visualstudio.com/assets/home/home-screenshot-mac-2x-v2.png)

## First Things First

As with any programming course, here is the `Hello World!` in Python.

```{python}
#| echo: true
print ("Hello World!")
```

![Hello, World!](https://i.redd.it/zbqqkmy3kyqy.png)

## Variables in Python

Variables are containers for storing data values. In Python, variables are created the moment you assign a value to it.

### Example

```python
x = 5
name = "Alice"
```

## Naming Conventions

- Variables names must start with a letter or an underscore.
- Can contain letters, numbers, and underscores.
- Case-sensitive (`age`, `Age`, and `AGE` are three different variables).

# Data Types in Python

Python has various data types including:

- **Integers**: `int` (e.g., `5`)
- **Floating-point numbers**: `float` (e.g., `5.0`)
- **Strings**: `str` (e.g., `"Hello, World!"`)
- **Booleans**: `bool` (e.g., `True` or `False`)

## Dynamic Typing

Python is dynamically typed, which means the type of a variable is determined at runtime.

```python
x = 4       # x is an integer
x = "Sally" # x is now a string
```

- Pros of Dynamic Typing:
  - very easy to work with
  - faster development time
- Cons of Dynamic Typing:
  - may result in unexpected bugs!

## Boolean Variables and Logic Operations

Boolean variables in Python are defined by two constant objects `True` and `False`. Understanding how Boolean operations work is crucial for control flow in programming.

### Truth Table

- **`AND`** operation (`True` if both are true)
- **`OR`** operation (`True` if at least one is true)
- **`NOT`** operation (Inverts the Boolean value)

![The Truth Table](images/truth_table.png)
<small><small>(Modified from [Intro To Programming](https://introcs.cs.princeton.edu/java/71boolean/))</small></small>


## Types of Operators

- **Arithmetic Operators**: `+`, `-`, `*`, `/`, `//`, `%`, `**` for basic math operations.
- **Comparison Operators**: `==`, `!=`, `<`, `>`, `<=`, `>=` for comparing values.
- **Logical Operators**: `and`, `or`, `not` for boolean logic.
- **Assignment Operators**: `=`, `+=`, `-=`, `*=`, `/=`, etc., to assign values to variables.
- **Membership Operators**: `in`, `not in`, to check membership in sequences.

## Examples

- `5 + 3` results in `8` (Arithmetic)
- `5 == 3` results in `False` (Comparison)
- `True and False` results in `False` (Logical)

## Type Conversion

You can convert between different types using Python's built-in functions like `int()`, `float()`, and `str()`.

```python
int(5.4) # Converts to integer
str(20) # Converts to string
float("3.14") # Converts to float
```

## Working with Strings

Strings in Python are used to handle textual data. They can be enclosed in either single quotes (`'...'`) or double quotes (`"..."`).

## Operations

- Concatenation: `'Hello ' + 'world!'`
- Repetition: `'Ha' * 3`
- Indexing: `'Hello'[1]` returns `'e'`
- Slicing: `'Hello'[1:4]` returns `'ell'`

## Useful String Methods

- `.upper()`, `.lower()`, `.strip()`, `.split()`, `.replace()`, `.find()`, `.join()`, `.count()`, `.startswith()`, `.endswith()`

- An even more comprehensive list of string methods in Python can be found:

  - here: [Python String Functions at Digital Ocean](https://www.digitalocean.com/community/tutorials/python-string-functions), and
  - here: [Python String Methods at Geeks for Geeks](https://www.geeksforgeeks.org/python-string-methods/)
  - BTW, both are excellent resources for additional documentation and examples.


# Introduction to Lists

Lists in Python are used to store multiple items in a single variable. Lists are ordered, changeable, and allow duplicate values.

## Creating a List

```python
my_list = [1, 2, 3]
names = ["Alice", "Bob", "Charlie"]
```

## Accessing Elements

- Access by index: `my_list[0]` returns `1`.
- Slicing: `names[1:3]` returns `['Bob', 'Charlie']`.

## List Operations

- Append: `my_list.append(4)`
- Remove: `my_list.remove(1)`
- Sort: `names.sort()`

# Advanced Variable Usage

Understanding variable scopes and mutability is crucial for Python programming.

## Variable Scope

- **Global Scope**: Variables defined at the top-level of a script or module are global.
- **Local Scope**: Variables created within a function are local to that function.

## Mutability

- Immutable types: `int`, `float`, `bool`, `str`. Changing the value creates a new object.
- Mutable types: `list`, `dict`, `set`. They can be changed in place without creating a new object.

# In-depth Data Types

Exploring Python's built-in data types reveals the language's flexibility.

## Sequences

- **Tuples**: Immutable and ordered. `my_tuple = (1, 2, 3)`
- **Ranges**: Immutable sequence of numbers. `range(1, 10)`

## Mapping Type

- **Dictionaries**: Key-value pairs. `my_dict = {"name": "Alice", "age": 30}`

## Set Types

- **Sets**: Unordered collection of unique elements. `my_set = {1, 2, 3}`
- **Frozen Sets**: Immutable version of a set. `frozen_set = frozenset([1, 2, 3])`

## Escape Characters

- Use `\` to insert special characters, e.g.,

- new line:

```{python}
#| echo: true
print ("Hello\nWorld!")
```

- tab:

```{python}
#| echo: true
print ("Hello\tWorld!")
```

## Summary
- Python is awesome
- Python uses **dynamic typing**
- Parentheses `( )` are for calling **functions**
- Square brackets `[ ]` are are indexing **lists**
- Strings are **immutable** lists
- Lists start indexing at **zero**

---

```{python}
#| echo: true
print ("Thank you!")
```

![](images/how_good.png)
