---
title: "Functions Problem Set"
subtitle: "Part 2"
format:
  revealjs:
    slide-number: true
    preview-links: true
    scrollable: true
---

## Problem 7: Higher-Order Functions

Write a function named `apply_operation` that takes a list of numbers, a function that performs an operation on a single number (e.g., square, cube), and applies that operation to each number in the list, returning a new list.

- Example Input: `apply_operation([1, 2, 3, 4], lambda x: x**2)`
- Example Output: `[1, 4, 9, 16]`

::: {.fragment}

### Solution:

```{python}
#| echo: true
def apply_operation(numbers, operation):
    return [operation(number) for number in numbers]


apply_operation([1, 2, 3, 4], lambda x: x**2)
```

### Explanation for the Solution:

The task is to apply a given operation (function) to each element of a list of numbers and return a new list with the results. The function `apply_operation` uses a higher-order function approach, where it takes another function (operation) as an argument and applies it to each element in the list.

#### Step-by-Step Breakdown:

1. **Function Argument:**
   - `apply_operation` accepts two arguments:
     - `numbers`: A list of numbers to which the operation will be applied.
     - `operation`: A function that takes a single number as input and performs an operation on it (e.g., squaring, cubing).

2. **List Comprehension:**
   - The function uses list comprehension to apply the `operation` to each `number` in the `numbers` list:
     - `[operation(number) for number in numbers]` loops through each number in the list, applies the `operation`, and builds a new list with the results.

3. **Return the Result:**
   - The function returns the new list where each number has the `operation` applied to it.

:::


## Problem 8: Flatten a Nested List

Write a *recursive* Python function `flatten` that takes a nested list (a list containing other lists) and returns a flat list containing all the elements in the nested list, in the same order.

- Example Input: `flatten([1, [2, 3], [4, [5, 6]], 7])`
- Example Output: `[1, 2, 3, 4, 5, 6, 7]`

::: {.fragment}

### Solution:

```{python}
#| echo: true
def flatten(nested_list):
    flat_list = []
    for item in nested_list:
        if type(item) == list:
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list


flatten([1, [2, 3], [4, [5, 6]], 7])
```

### Explanation for the Solution:

The task is to flatten a nested list (a list containing other lists) into a single, flat list containing all the elements, preserving their original order. The function `flatten` accomplishes this using recursion to handle arbitrarily nested lists.

#### Step-by-Step Breakdown:

1. **Base Case:**
   - If an element in the `nested_list` is not a list, it is added directly to the `flat_list`.
   
2. **Recursive Case:**
   - If an element is a list, the function calls itself recursively on that sublist. The result of this recursive call (a flattened version of the sublist) is then added to the `flat_list` using `extend()`.
   - This process continues until all the nested sublists are fully flattened.

3. **Return the Result:**
   - After processing all elements in the `nested_list`, the function returns the `flat_list` containing all elements in their original order but without any nesting.

:::

## Problem 9: Reverse a List

Write a *recursive* function named `reverse_list` that takes a list and returns a new list with the elements in reverse order.

- Example Input: `[1, 2, 3, 4, 5]`
- Example Output: `[5, 4, 3, 2, 1]`

::: {.fragment}

### Solution

```{python}
#| echo: true
def reverse_list(lst):
    if len(lst) == 0:
        return []
    else:
        return [lst[-1]] + reverse_list(lst[:-1])

reverse_list([1, 2, 3, 4, 5])
```

### Explanation for the Solution:

The task is to reverse a list using recursion. The function `reverse_list` takes a list and returns a new list with the elements in reverse order by using recursive calls.

#### Step-by-Step Breakdown:

1. **Base Case:**
   - If the list is empty (`len(lst) == 0`), the function returns an empty list. This serves as the base case, which stops the recursion.

2. **Recursive Case:**
   - If the list is not empty, the function takes the last element of the list (`lst[-1]`), places it at the front of the new list, and recursively calls itself on the remaining list (`lst[:-1]`) which excludes the last element.
   - This process continues until the base case is reached (an empty list), at which point all elements have been added in reverse order.

3. **Return the Result:**
   - The function builds and returns the reversed list by combining the last element of the current list with the result of recursively reversing the remaining list.

#### Example Walkthrough:

For the input `[1, 2, 3, 4, 5]`:
- The function will recursively process the list as follows:
  - `reverse_list([1, 2, 3, 4, 5])` → `[5] + reverse_list([1, 2, 3, 4])`
  - `reverse_list([1, 2, 3, 4])` → `[5] + [4] + reverse_list([1, 2, 3])`
  - `reverse_list([1, 2, 3])` → `[5] + [4] + [3] + reverse_list([1, 2])`
  - `reverse_list([1, 2])` → `[5] + [4] + [3] + [2] + reverse_list([1])`
  - `reverse_list([1])` → `[5] + [4] + [3] + [2] + [1] + reverse_list([])`
  - Base case is reached (`reverse_list([])` returns `[]`).
- The final result is `[5, 4, 3, 2, 1]`.

:::

## Problem 10: Find Missing Numbers

Given a list of unique integers sorted in increasing order, write a Python function named `find_missing` that returns a list of any missing integers in the sequence from the minimum to the maximum value.

- Example Input: `[1, 2, 4, 6, 7]`
- Example Output: `[3, 5]`

::: {.fragment}

### Solution

```{python}
#| echo: true
def find_missing(numbers):
    full_set = set(range(min(numbers), max(numbers) + 1))
    missing = full_set - set(numbers)
    return sorted(list(missing))

find_missing([1, 2, 4, 6, 7])
```

### Explanation for the Solution:

The task is to find any missing integers in a sorted list of unique integers by comparing the full range of numbers from the minimum to the maximum with the given list. The function `find_missing` achieves this using Python’s set operations.

#### Step-by-Step Breakdown:

1. **Create the Full Set:**
   - First, the function generates a set containing all integers from the minimum to the maximum value of the input list. This is done using `range(min(numbers), max(numbers) + 1)` to ensure that all numbers between the smallest and largest values in the list are included. The `set()` function is used to convert this range into a set, `full_set`.

2. **Find Missing Numbers:**
   - The function converts the input list `numbers` into a set and subtracts it from the `full_set`. This set difference (`full_set - set(numbers)`) gives us all the numbers that are in `full_set` but not in the input list, which are the missing numbers.

3. **Sort the Result:**
   - Since set operations do not guarantee any specific order, the missing numbers are sorted using `sorted()` to return the list in ascending order.

4. **Return the Result:**
   - The function returns the sorted list of missing numbers.

#### Example Walkthrough:

For the input `[1, 2, 4, 6, 7]`:

- The full set of numbers from 1 to 7 is `{1, 2, 3, 4, 5, 6, 7}`.
- The set of the given numbers is `{1, 2, 4, 6, 7}`.
- The difference between these sets is `{3, 5}`, representing the missing numbers.
- The function returns `[3, 5]` after sorting.

:::
