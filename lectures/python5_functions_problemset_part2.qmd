---
title: "Functions Problem Set"
subtitle: "Part 2"
format:
  revealjs:
    slide-number: true
    preview-links: true
    scrollable: true
---


## Problem 8: Higher-Order Functions

Write a function named `apply_operation` that takes a list of numbers, a function that performs an operation on a single number (e.g., square, cube), and applies that operation to each number in the list, returning a new list.

- Example Input: `apply_operation([1, 2, 3, 4], lambda x: x**2)`
- Example Output: `[1, 4, 9, 16]`

::: {.fragment}

- Solution

```{python}
#| echo: true
def apply_operation(numbers, operation):
    return [operation(number) for number in numbers]


apply_operation([1, 2, 3, 4], lambda x: x**2)
```

:::


## Problem 9: Flatten a Nested List

Write a *recursive* Python function `flatten` that takes a nested list (a list containing other lists) and returns a flat list containing all the elements in the nested list, in the same order.

- Example Input: `flatten([1, [2, 3], [4, [5, 6]], 7])`
- Example Output: `[1, 2, 3, 4, 5, 6, 7]`

::: {.fragment}

- Solution

```{python}
#| echo: true
def flatten(nested_list):
    flat_list = []
    for item in nested_list:
        if type(item) == list:
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list


flatten([1, [2, 3], [4, [5, 6]], 7])
```

:::

## Problem 10: Reverse a List

Write a *recursive* function named `reverse_list` that takes a list and returns a new list with the elements in reverse order.

- Example Input: `[1, 2, 3, 4, 5]`
- Example Output: `[5, 4, 3, 2, 1]`

::: {.fragment}

- Solution

```{python}
#| echo: true
def reverse_list(lst):
    if len(lst) == 0:
        return []
    else:
        return [lst[-1]] + reverse_list(lst[:-1])

reverse_list([1, 2, 3, 4, 5])
```

:::

## Problem 11: Find Missing Numbers

Given a list of unique integers sorted in increasing order, write a Python function named `find_missing` that returns a list of any missing integers in the sequence from the minimum to the maximum value.

- Example Input: `[1, 2, 4, 6, 7]`
- Example Output: `[3, 5]`

::: {.fragment}

- Solution

```{python}
#| echo: true
def find_missing(numbers):
    full_set = set(range(min(numbers), max(numbers) + 1))
    missing = full_set - set(numbers)
    return sorted(list(missing))

find_missing([1, 2, 4, 6, 7])
```

:::
