---
title: "Functions in Python"
format:
  revealjs:
    slide-number: true
    preview-links: true
    scrollable: true
---

## Functions
- Functions are **reusable** blocks of code that perform a specific task
- They can take input parameters and return output values
- Functions are essential in modular programming, as they help organize code and make it more readable

## Defining a Function
- To define a function in Python, use the keyword `def` followed by the function name and input parameters in parentheses
- The function body is **indented** below the header line
- Use the keyword `return` to specify the output value(s) of the function
 
```{python}
#| echo: true
def add_numbers(x, y):
    result = x + y
    return result

type(add_numbers)
```


## Calling a Function
To call a function, use its name followed by input values in parentheses The function returns the output value(s), which can be stored in a variable or used directly

```{python}
#| echo: true
sum = add_numbers(2, 3)
print(sum)
```


## Default Parameter Values
- Functions can have default values for input parameters, which are used when no value is provided
- Default values are specified in the function header

```{python}
#| echo: true
def greet(name, greeting = "Hello"):
  print(greeting + ", " + name)
greet("Alice")
```

```{python}
#| echo: true
greet("Bob", "Hi")
```


## Variable-Length Arguments
- Variable-length arguments allow a function to accept any number of input arguments
- They are useful when the number of input arguments is unknown or can vary

```{python}
#| echo: true
def add_numbers(*args):
  result = 0
  for num in args:
    result += num
  return result

print(add_numbers(1, 2))
print(add_numbers(1, 2, 3))
```

## Function Annotation

```{python}
#| echo: true
def add_numbers(*args):
    
    """
    Computes the sum of n numbers
    
    Parameters:
    args: A tuple of numbers
    
    Returns:
    int: The sum
    """        
    
    result = 0
    for num in args:
        result += num
    return result

help(add_numbers)
```


## Lambda ($\lambda$) Functions
- Lambda functions are **anonymous** functions that can be defined inline and used immediately
- They are useful for *simple* tasks that do not require a named function
- Lambda functions can only have **one** expression (i.e., no statements)

```{python}
#| echo: true
double = lambda x: x * 2
print(double(3))
```


## Recursion

:::: {.columns}

::: {.column width="65%"}

- Recursion is a technique where a function calls itself
- It is useful for solving problems that can be broken down into smaller subproblems
- Termination Condition is essential for preventing infinite loops in recursion
- Each recursive call consumes stack memory; deep recursion can lead to stack overflow if not properly managed

:::

::: {.column width="35%"}
![](images/inception.jpg)
:::

::::

## Understanding Recursion with Factorial

A factorial of a non-negative integer $n$ is the product of all positive integers less than or equal to $n$. It is denoted by $n!$. Factorials are widely used in permutations and combinations.

The factorial of a number $n$ is defined as:

$$
n! = n \times (n - 1) \times (n - 2) \times ... \times 1
$$

For example:

$$
5! = 5 \times 4 \times 3 \times 2 \times 1 = 120
$$

One of the elegant ways to compute factorials in programming is by using **recursion**.

## Recursive Factorial Function in Python

```{python}
#| echo: true
def factorial(n):
  """
  This function calculates the factorial of a non-negative integer.

  Args:
      n: The non-negative integer whose factorial is to be calculated.

  Returns:
      The factorial of n.
  """
  if n == 0: # Base case
    return 1
  else:
    return n * factorial(n-1) # Recursive case

# Test the function
factorial(5)
```

## Sequence Diagram

```{mermaid}
sequenceDiagram
    participant Main
    participant f5 as factorial(5)
    participant f4 as factorial(4)
    participant f3 as factorial(3)
    participant f2 as factorial(2)
    participant f1 as factorial(1)
    participant f0 as factorial(0)
    
    Main->>f5: Call factorial(5)
    activate f5
    f5->>f4: Call factorial(4)
    activate f4
    f4->>f3: Call factorial(3)
    activate f3
    f3->>f2: Call factorial(2)
    activate f2
    f2->>f1: Call factorial(1)
    activate f1
    f1->>f0: Call factorial(0)
    activate f0
    f0-->>f1: Return 1
    deactivate f0
    f1-->>f2: Return 1
    deactivate f1
    f2-->>f3: Return 2 * 1 = 2
    deactivate f2
    f3-->>f4: Return 3 * 2 = 6
    deactivate f3
    f4-->>f5: Return 4 * 6 = 24
    deactivate f4
    f5-->>Main: Return 5 * 24 = 120
    deactivate f5
```

### Explanation

1. Main Function Calls `factorial(5)`:

- The main program starts by calling `factorial(5)`.

2. Recursive Calls:

- `factorial(5)` checks `if n == 1`. Since it is not, it calls `factorial(4)`.
- `factorial(4)` calls `factorial(3)`, and this pattern continues until `factorial(1)` is called.

3. Base Case:

-  `factorial(0)` reaches the base case where `n == 0` and returns `1`.

4. Unwinding the Call Stack:

Each function now returns to its caller:

- `factorial(1)` receives `1` and returns `1 * 1 = 1`.
- `factorial(2)` receives `1` and returns `2 * 1 = 2`.
- `factorial(3)` receives `2` and returns `3 * 2 = 6`.
- `factorial(4)` receives `6` and returns `4 * 6 = 24`.
- `factorial(5)` receives `24` and returns `5 * 24 = 120`.

5. Final Result:
The main function receives `120` from `factorial(5)`.


## Advantages and Disadvantages of Recursion
### Advantages
- **Simplicity**: Recursive solutions can be more readable and easier to understand.
- **Natural Fit**: Some problems, like tree traversals, are naturally recursive.

### Disadvantages
- **Performance**: Recursive calls can be slower due to overhead.
- **Memory Usage**: Each recursive call consumes stack memory; deep recursion can lead to stack overflow.


## Global vs Local Variables
- Global variables are defined outside of any function and can be accessed from anywhere in the program
- Local variables are defined inside a function and can only be accessed within that function

```{python}
#| echo: true
global_var = 10

def my_func():
    local_var = 20
    print(global_var)
    print(local_var)

my_func()
```

```{python}
#| echo: true
print(global_var)
```

```{python}
#| echo: true
# print(local_var)
```


# Exercises

## Exercise 1
Write a Python function that takes a list of numbers and returns their product.

```{python}
#| echo: false
def multiply_numbers(numbers):
  product = 1
  for num in numbers:
    product *= num
  return product
```

**Sample:**

```{python}
#| echo: true
multiply_numbers([2, 3, 4])
```

::: {.fragment}

**Answer:**

```{python}
#| echo: true
def multiply_numbers(numbers):
  product = 1
  for num in numbers:
    product *= num
  return product

multiply_numbers([2, 3, 4])
```

:::

## Exercise 2
Write a Python function that finds the maximum and minimum numbers in a list.

```{python}
#| echo: false
def find_min_max(numbers):
  min_num = numbers[0] # Set the min to the first number in the list
  max_num = numbers[0] # Set the max to the first number in the list
  for num in numbers:
    if num > max_num:
      max_num = num
    elif num < min_num:
      min_num = num
  return (min_num, max_num)
```

**Sample:**

```{python}
#| echo: true
find_min_max ([2, 3, 4])
```

::: {.fragment}

**Answer:**

```{python}
#| echo: true
def find_min_max(numbers):
  min_num = numbers[0] # Set the min to the first number in the list
  max_num = numbers[0] # Set the max to the first number in the list
  for num in numbers:
    if num > max_num:
      max_num = num
    elif num < min_num:
      min_num = num
  return (min_num, max_num)

find_min_max ([2, 3, 4])
```

:::

## Exercise 3
Write a Python function that takes a list of strings and returns the longest string.

```{python}
#| echo: false
def find_longest_string(strings):
  # Set the longest string to first string in the list
  longest_string = strings[0]
  for string in strings:
    # Compare the length of the current string to the longest string so far
    if len(string) > len(longest_string):
      longest_string = string
  return longest_string
```

**Sample:**

```{python}
#| echo: true
find_longest_string(["Vicky", "Cristina", "Barcelona"])
```

::: {.fragment}

**Answer:**

```{python}
#| echo: true
def find_longest_string(strings):
  # Set the longest string to first string in the list
  longest_string = strings[0]
  for string in strings:
    # Compare the length of the current string to the longest string so far
    if len(string) > len(longest_string):
      longest_string = string
  return longest_string

find_longest_string(["Vicky", "Cristina", "Barcelona"])
```

:::
